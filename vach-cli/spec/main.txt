BASIC TEMPLATE -> vach [instruction] [-flag inputs inputs]

## ALL INSTRUCTIONS && SHORT FORMS
vach pack == vach p
vach verify == vach v
vach list == vach l
vach unpack == vach u
vach repack == vach r
vach keypair == vach k
vach split == vach s

## Keys usable in the CLI
 -o 	| --output				-> general target output
 -i 	| --input 				-> general LIST of input sources
 -s 	| --source				-> treats the entries in a .vach file like regular files, but with metadata from the archive

 -d 	| --directory			-> add all files in a directory into the input queue
 -r	| --directory-r		-> same as above, only that it adds files from the directory recursively

 -x 	| --exclude			-> exclude the given files from the write queue
 -t 	| --truncates			-> deletes the original files after they have been processed successfully

 -f 	| --flags			-> The flags that go into the .vach file header section
 -m 	| --magic			-> the magic used to generate the archive
 -c 	| --compress-mode	-> the compress mode of the adjacent leafs
 -v 	| --version			-> the version of the leafs being read or to be written
 -h 	| --hash				-> to sign the entries and include the signatures in the target
 -e 	| --encrypt			-> encrypt the data, an sk or kp must be provided
 -s	| --split				-> used in conjunction with the keypair subcommand to split the keypair upon generation into it's two parts

 -s	| --secret-key		-> The secret key to be used in signing of signatures
 -p	| --public-key		-> The public key to be used in decryption and validation of signatures
 -k	| --keypair			-> A keypair is just a pair of the above two, but when set will be chosen over the above

 -q	| --quiet			-> Tells the CLI to not log any messages to the console

# Pack the given files, outputs to textures.vach, use magic TXTRS, compress-mode detect, and truncates(deletes) the original files after being archived
vach pack -o textures.vach -i face.webm brick.png logo.png -m TXTRS -c detect -t

# Verify that the archive textures.vach has magic and the archive has the same version as the loader
vach verify -i textures.vach -m TXTRS

# List the entries in textures.vach
vach list -i textures.vach

# Unpack textures.vach
vach unpack -i textures.vach

# Add directories to the write queue, also add some extra files
vach pack -o levels.vach -d ./levels ./dlc-levels -i easteregg.lvl

# Add directories recursively
vach pack -o sounds.vach -r ./sounds

# Add specific files from a directory, but exclude some files
vach pack -o keys.vach -d ./keys -x github.key

# Repack from the given source to the given target, and also add some extra files
vach repack -s sounds.vach -o sounds-compressed.vach -i pew.wav -c detect -v 15 -m SUNDS

# Pack using encryption, and sign the data to check for integrity
vach pack -o scripts.vach -i raycast.wasm matchmaking.wasm modloader.wasm -e -h
#    scripts.vach
#    keypair.kp

# Unpack from encrypted source
vach unpack -i scripts.vach -k keypair.kp

# Generate a random keypair
vach keypair -o generated.kp
#    generated.kp

# Generate a random keypair, split it into its public and secret keys
vach keypair -o generated2.kp -s
#    generated2.pk
#    generated2.sk

# Split an existing keypair into it's key
vach split -i generated.kp
#    generated.pk
#    generated.sk

# Pack and sign the data to check for integrity, using an existing keypair
vach pack -o scripts.vach -i raycast.wasm matchmaking.wasm modloader.wasm -h -k generated.kp

# Pack and sign the data to check for integrity, using an existing secret key
vach pack -o scripts.vach -i raycast.wasm matchmaking.wasm modloader.wasm -h -s generated.sk

# Or if you only have the public key
vach unpack -i scripts.vach -p generated.pk

# Overridden properties for leafs
vach pack -o textures.vach -i normals.png [logo.png -c never -v 00] diffuse.png -c always

# Source an encrypted archive
vach pack -o sounds.vach -i boom.wav death.wav button.wav -s redist.vach kp=redist-keypair.kp

# Source an encrypted archive, using only public key
vach pack -o sounds.vach -i boom.wav death.wav button.wav -s redist.vach pk=redist-keypair.pk
